
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  000009c2  00000a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800206  00800206  00000a5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024bd  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ac  00000000  00000000  00003109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000232d  00000000  00000000  000045b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  000068e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013a6c  00000000  00000000  00006ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df6  00000000  00000000  0001a74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0001b542  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000051b1  00000000  00000000  0001b662  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	e7 c3       	rjmp	.+1998   	; 0x7d4 <__vector_1>
   6:	00 00       	nop
   8:	09 c4       	rjmp	.+2066   	; 0x81c <__vector_2>
   a:	00 00       	nop
   c:	2d c4       	rjmp	.+2138   	; 0x868 <__vector_3>
   e:	00 00       	nop
  10:	50 c4       	rjmp	.+2208   	; 0x8b2 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	18 c2       	rjmp	.+1072   	; 0x456 <__vector_9>
  26:	00 00       	nop
  28:	69 c4       	rjmp	.+2258   	; 0x8fc <__vector_10>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	7b c2       	rjmp	.+1270   	; 0x52c <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	ab c3       	rjmp	.+1878   	; 0x79c <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d4 d2       	rcall	.+1448   	; 0x6c8 <main>
 120:	4e c4       	rjmp	.+2204   	; 0x9be <_exit>

00000122 <__bad_interrupt>:
 122:	fa c1       	rjmp	.+1012   	; 0x518 <__vector_default>

00000124 <MotorStatus>:
	
	 return MotorStatus();
 }
 
 Status MotorStatus()
 {
 124:	8c d1       	rcall	.+792    	; 0x43e <GetStatus>
 126:	98 2f       	mov	r25, r24
 128:	9a 70       	andi	r25, 0x0A	; 10
 12a:	e9 f4       	brne	.+58     	; 0x166 <MotorStatus+0x42>
 12c:	98 2f       	mov	r25, r24
 12e:	99 70       	andi	r25, 0x09	; 9
 130:	99 f0       	breq	.+38     	; 0x158 <MotorStatus+0x34>
 132:	98 2f       	mov	r25, r24
 134:	96 70       	andi	r25, 0x06	; 6
 136:	31 f0       	breq	.+12     	; 0x144 <MotorStatus+0x20>
 138:	98 2f       	mov	r25, r24
 13a:	93 70       	andi	r25, 0x03	; 3
 13c:	b1 f4       	brne	.+44     	; 0x16a <MotorStatus+0x46>
 13e:	82 fd       	sbrc	r24, 2
 140:	16 c0       	rjmp	.+44     	; 0x16e <MotorStatus+0x4a>
 142:	21 c0       	rjmp	.+66     	; 0x186 <MotorStatus+0x62>
 144:	98 2f       	mov	r25, r24
 146:	97 70       	andi	r25, 0x07	; 7
 148:	a1 f0       	breq	.+40     	; 0x172 <MotorStatus+0x4e>
 14a:	98 2f       	mov	r25, r24
 14c:	93 70       	andi	r25, 0x03	; 3
 14e:	99 f4       	brne	.+38     	; 0x176 <MotorStatus+0x52>
 150:	82 ff       	sbrs	r24, 2
 152:	13 c0       	rjmp	.+38     	; 0x17a <MotorStatus+0x56>
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	08 95       	ret
 158:	8d 70       	andi	r24, 0x0D	; 13
 15a:	89 f4       	brne	.+34     	; 0x17e <MotorStatus+0x5a>
 15c:	79 d1       	rcall	.+754    	; 0x450 <GetEmStatus>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	81 f4       	brne	.+32     	; 0x182 <MotorStatus+0x5e>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	08 95       	ret
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	08 95       	ret
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	08 95       	ret
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	08 95       	ret
 17a:	87 e0       	ldi	r24, 0x07	; 7
 17c:	08 95       	ret
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	08 95       	ret
 182:	87 e0       	ldi	r24, 0x07	; 7
 184:	08 95       	ret
 186:	98 2f       	mov	r25, r24
 188:	97 70       	andi	r25, 0x07	; 7
 18a:	11 f7       	brne	.-60     	; 0x150 <MotorStatus+0x2c>
 18c:	87 e0       	ldi	r24, 0x07	; 7
 18e:	08 95       	ret

00000190 <DrvrInit>:
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	8b 01       	movw	r16, r22
 19a:	51 d1       	rcall	.+674    	; 0x43e <GetStatus>
 19c:	8b 30       	cpi	r24, 0x0B	; 11
 19e:	59 f4       	brne	.+22     	; 0x1b6 <DrvrInit+0x26>
 1a0:	c1 11       	cpse	r28, r1
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <DrvrInit+0x1c>
 1a4:	b8 01       	movw	r22, r16
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	c4 d0       	rcall	.+392    	; 0x332 <MotorDriverInit>
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <DrvrInit+0x26>
 1ac:	c1 30       	cpi	r28, 0x01	; 1
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <DrvrInit+0x26>
 1b0:	b8 01       	movw	r22, r16
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	be d0       	rcall	.+380    	; 0x332 <MotorDriverInit>
 1b6:	b6 df       	rcall	.-148    	; 0x124 <MotorStatus>
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <MotorStop>:
 1c0:	3e d1       	rcall	.+636    	; 0x43e <GetStatus>
 1c2:	8b 70       	andi	r24, 0x0B	; 11
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <MotorStop+0x8>
 1c6:	fc df       	rcall	.-8      	; 0x1c0 <MotorStop>
 1c8:	ad cf       	rjmp	.-166    	; 0x124 <MotorStatus>
 1ca:	08 95       	ret

000001cc <MotorForward>:
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
 1d0:	36 d1       	rcall	.+620    	; 0x43e <GetStatus>
 1d2:	98 2f       	mov	r25, r24
 1d4:	99 70       	andi	r25, 0x09	; 9
 1d6:	99 30       	cpi	r25, 0x09	; 9
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <MotorForward+0x1c>
 1da:	87 70       	andi	r24, 0x07	; 7
 1dc:	87 30       	cpi	r24, 0x07	; 7
 1de:	21 f4       	brne	.+8      	; 0x1e8 <MotorForward+0x1c>
 1e0:	ef df       	rcall	.-34     	; 0x1c0 <MotorStop>
 1e2:	66 e0       	ldi	r22, 0x06	; 6
 1e4:	8c 2f       	mov	r24, r28
 1e6:	65 d0       	rcall	.+202    	; 0x2b2 <MotorDrive>
 1e8:	9d df       	rcall	.-198    	; 0x124 <MotorStatus>
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <MotorReverse>:
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
 1f2:	25 d1       	rcall	.+586    	; 0x43e <GetStatus>
 1f4:	98 2f       	mov	r25, r24
 1f6:	99 70       	andi	r25, 0x09	; 9
 1f8:	99 30       	cpi	r25, 0x09	; 9
 1fa:	39 f4       	brne	.+14     	; 0x20a <MotorReverse+0x1c>
 1fc:	86 70       	andi	r24, 0x06	; 6
 1fe:	86 30       	cpi	r24, 0x06	; 6
 200:	21 f4       	brne	.+8      	; 0x20a <MotorReverse+0x1c>
 202:	de df       	rcall	.-68     	; 0x1c0 <MotorStop>
 204:	67 e0       	ldi	r22, 0x07	; 7
 206:	8c 2f       	mov	r24, r28
 208:	54 d0       	rcall	.+168    	; 0x2b2 <MotorDrive>
 20a:	8c df       	rcall	.-232    	; 0x124 <MotorStatus>
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	1f 92       	push	r1
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x700064>
 220:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x700065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
 224:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	69 f0       	breq	.+26     	; 0x246 <sysclk_init+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 22c:	8f b7       	in	r24, 0x3f	; 63
 22e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 230:	f8 94       	cli
	return flags;
 232:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
 234:	5f 93       	push	r21
 236:	50 e8       	ldi	r21, 0x80	; 128
 238:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 23c:	53 e0       	ldi	r21, 0x03	; 3
 23e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x700061>
 242:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 244:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
 246:	0f 90       	pop	r0
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <MotorRate>:
 }

 // callback function for timer code
 void MotorRate()
 {
    if (curDir == FORWARD)
 24e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <curDir>
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	b1 f4       	brne	.+44     	; 0x282 <MotorRate+0x34>
	{
	   ioport_tgl_group(ioport_pin_to_port_id(currConfig.config.forwardPin),1<<currConfig.config.forwardPin);
 256:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <__data_end+0x1>
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	08 2e       	mov	r0, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <MotorRate+0x18>
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <MotorRate+0x14>
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 26a:	86 95       	lsr	r24
 26c:	86 95       	lsr	r24
 26e:	86 95       	lsr	r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ac 01       	movw	r20, r24
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	fa 01       	movw	r30, r20
 27a:	e8 0f       	add	r30, r24
 27c:	f9 1f       	adc	r31, r25
__always_inline static void arch_ioport_toggle_port_level(ioport_port_t port,
		ioport_port_mask_t mask)
{
	PORT_t *base = arch_ioport_port_to_base(port);

	base->PINCRL = mask;
 27e:	20 a3       	std	Z+32, r18	; 0x20
 280:	08 95       	ret
	}
	else if (curDir == REVERSE)
 282:	87 30       	cpi	r24, 0x07	; 7
 284:	a9 f4       	brne	.+42     	; 0x2b0 <MotorRate+0x62>
	{
	   ioport_tgl_group(ioport_pin_to_port_id(currConfig.config.reversePin), 1<<currConfig.config.reversePin); 
 286:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end+0x2>
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	08 2e       	mov	r0, r24
 290:	02 c0       	rjmp	.+4      	; 0x296 <MotorRate+0x48>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <MotorRate+0x44>
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 29a:	86 95       	lsr	r24
 29c:	86 95       	lsr	r24
 29e:	86 95       	lsr	r24
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	fa 01       	movw	r30, r20
 2aa:	e8 0f       	add	r30, r24
 2ac:	f9 1f       	adc	r31, r25
__always_inline static void arch_ioport_toggle_port_level(ioport_port_t port,
		ioport_port_mask_t mask)
{
	PORT_t *base = arch_ioport_port_to_base(port);

	base->PINCRL = mask;
 2ae:	20 a3       	std	Z+32, r18	; 0x20
 2b0:	08 95       	ret

000002b2 <MotorDrive>:
	
 }
 
 //forward motor --forward led flash, reverse led stops
 void MotorDrive(Speed speed,Dir direction)
 {
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	c8 2f       	mov	r28, r24
 2b8:	d6 2f       	mov	r29, r22

	   if (speed == SLOW)
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	49 f4       	brne	.+18     	; 0x2d0 <MotorDrive+0x1e>
	   {
		  tc_timer_set(TMR_TICKS(CONFIG_TC_TIMEOUT_CLOCK_SOURCE_HZ,.4),&MotorRate);
 2be:	47 e2       	ldi	r20, 0x27	; 39
 2c0:	51 e0       	ldi	r21, 0x01	; 1
 2c2:	6d e0       	ldi	r22, 0x0D	; 13
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
		  tc_timer_start();
 2ca:	79 d1       	rcall	.+754    	; 0x5be <tc_timer_set>
 2cc:	e2 d1       	rcall	.+964    	; 0x692 <tc_timer_start>
 2ce:	0a c0       	rjmp	.+20     	; 0x2e4 <MotorDrive+0x32>
	   }
	   else if (speed == FAST)
 2d0:	83 30       	cpi	r24, 0x03	; 3
 2d2:	41 f4       	brne	.+16     	; 0x2e4 <MotorDrive+0x32>
	   {
	      tc_timer_set(TMR_TICKS(CONFIG_TC_TIMEOUT_CLOCK_SOURCE_HZ,.1),&MotorRate);
 2d4:	47 e2       	ldi	r20, 0x27	; 39
 2d6:	51 e0       	ldi	r21, 0x01	; 1
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
	      tc_timer_start();
 2e0:	6e d1       	rcall	.+732    	; 0x5be <tc_timer_set>
 2e2:	d7 d1       	rcall	.+942    	; 0x692 <tc_timer_start>
	   }
	 
	   if (emStatus != NOEMERG) //emergency bit changed
 2e4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 2e8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ea:	41 f0       	breq	.+16     	; 0x2fc <MotorDrive+0x4a>
	   {
		   currConfig.config.callback(emStatus=NOEMERG); // call callback
 2ec:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
 2f0:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <emStatus>
 2fa:	19 95       	eicall
	   }
	   curSpeed=speed;
 2fc:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__data_start>
	   curDir=direction;
 300:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <curDir>

 }
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <StopMotor>:


 void StopMotor()
 {
    curDir=EQUAL;
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <curDir>
	curSpeed=STONE;
 310:	85 e0       	ldi	r24, 0x05	; 5
 312:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    tc_timer_stop();
	if (emStatus != NOEMERG) //emergency bit changed
 316:	c9 d1       	rcall	.+914    	; 0x6aa <tc_timer_stop>
 318:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 31c:	8f 3f       	cpi	r24, 0xFF	; 255
	{
		currConfig.config.callback(emStatus=NOEMERG); // call callback
 31e:	41 f0       	breq	.+16     	; 0x330 <StopMotor+0x26>
 320:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
 324:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <emStatus>
 32e:	19 95       	eicall
 330:	08 95       	ret

00000332 <MotorDriverInit>:
 static Dir curDir=EQUAL;
 static Speed curSpeed=STONE;
  
 void MotorDriverInit(uint8_t config, CallbType callback)
 {
    cpu_irq_disable();
 332:	f8 94       	cli
    if (config == 0)
 334:	81 11       	cpse	r24, r1
 336:	12 c0       	rjmp	.+36     	; 0x35c <MotorDriverInit+0x2a>
	{
	   LEDConfigA configA;
	   configA.LEDs=PORTE;
 338:	8e b1       	in	r24, 0x0e	; 14
	   configA.forwardPin=PINE1;
	   configA.reversePin=PINE2;
	   configA.emergSwPin=PINB7;
	   currConfig.config=configA;
 33a:	e6 e0       	ldi	r30, 0x06	; 6
 33c:	f2 e0       	ldi	r31, 0x02	; 2
 33e:	80 83       	st	Z, r24
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	81 83       	std	Z+1, r24	; 0x01
 344:	92 e0       	ldi	r25, 0x02	; 2
 346:	92 83       	std	Z+2, r25	; 0x02
 348:	97 e0       	ldi	r25, 0x07	; 7
 34a:	93 83       	std	Z+3, r25	; 0x03
 34c:	15 82       	std	Z+5, r1	; 0x05
 34e:	14 82       	std	Z+4, r1	; 0x04
	   configA.callback=callback;
	   PCMSK0=(1<<currConfig.config.emergSwPin); //set which pin interrupts is enabled
 350:	90 e8       	ldi	r25, 0x80	; 128
 352:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x70006b>
	   PCICR=(1<<PCINTMASK); //enable PCINT0
 356:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
 35a:	15 c0       	rjmp	.+42     	; 0x386 <MotorDriverInit+0x54>
	}
	else if (config == 1)
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	09 f0       	breq	.+2      	; 0x362 <MotorDriverInit+0x30>
 360:	6d c0       	rjmp	.+218    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	{
	   LEDConfigB configB;
	   configB.LEDs=PORTH;
 362:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	   configB.forwardPin=PINH5;
	   configB.reversePin=PINH6;
	   configB.emergSwPin=PINB6;
	   currConfig.configCopy=configB;
 366:	e6 e0       	ldi	r30, 0x06	; 6
 368:	f2 e0       	ldi	r31, 0x02	; 2
 36a:	80 83       	st	Z, r24
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	81 83       	std	Z+1, r24	; 0x01
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	82 83       	std	Z+2, r24	; 0x02
 374:	83 83       	std	Z+3, r24	; 0x03
 376:	15 82       	std	Z+5, r1	; 0x05
 378:	14 82       	std	Z+4, r1	; 0x04
	   configB.callback=callback;
	   PCMSK0=(1<<currConfig.config.emergSwPin); //set which pin interrupt is enabled
 37a:	80 e4       	ldi	r24, 0x40	; 64
 37c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x70006b>
	   PCICR=(1<<PCINTMASK); //enable PCINT0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
	   return;
	}
	ioport_init();
	// configure Leds
    ioport_configure_port_pin((void*)currConfig.config.LEDs,
	                         (pin_mask_t)((1<<currConfig.config.forwardPin)|(1<<currConfig.config.reversePin)),IOPORT_DIR_OUTPUT);
 386:	a6 e0       	ldi	r26, 0x06	; 6
 388:	b2 e0       	ldi	r27, 0x02	; 2
	{
	   return;
	}
	ioport_init();
	// configure Leds
    ioport_configure_port_pin((void*)currConfig.config.LEDs,
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	ac 01       	movw	r20, r24
 390:	11 96       	adiw	r26, 0x01	; 1
 392:	0c 90       	ld	r0, X
 394:	11 97       	sbiw	r26, 0x01	; 1
 396:	02 c0       	rjmp	.+4      	; 0x39c <MotorDriverInit+0x6a>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <MotorDriverInit+0x66>
 3a0:	9c 01       	movw	r18, r24
 3a2:	12 96       	adiw	r26, 0x02	; 2
 3a4:	0c 90       	ld	r0, X
 3a6:	12 97       	sbiw	r26, 0x02	; 2
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <MotorDriverInit+0x7c>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <MotorDriverInit+0x78>
 3b2:	24 2b       	or	r18, r20
 3b4:	ec 91       	ld	r30, X
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 3b8:	32 2f       	mov	r19, r18
 3ba:	30 95       	com	r19
 3bc:	42 81       	ldd	r20, Z+2	; 0x02
 3be:	34 23       	and	r19, r20
 3c0:	32 83       	std	Z+2, r19	; 0x02
		}

		*((uint8_t *)port + 1) |= pin_mask;
 3c2:	31 81       	ldd	r19, Z+1	; 0x01
 3c4:	23 2b       	or	r18, r19
 3c6:	21 83       	std	Z+1, r18	; 0x01
	                         (pin_mask_t)((1<<currConfig.config.forwardPin)|(1<<currConfig.config.reversePin)),IOPORT_DIR_OUTPUT);
	
	// configure emergency switch
	ioport_configure_port_pin((void*)ioport_pin_to_port(currConfig.config.emergSwPin),
	                          (pin_mask_t)(1<<currConfig.config.emergSwPin),IOPORT_DIR_INPUT|IOPORT_PULL_UP);
 3c8:	13 96       	adiw	r26, 0x03	; 3
 3ca:	2c 91       	ld	r18, X
 3cc:	e2 2f       	mov	r30, r18
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <MotorDriverInit+0xa4>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	2a 95       	dec	r18
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <MotorDriverInit+0xa0>
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 3da:	f6 95       	lsr	r31
 3dc:	e7 95       	ror	r30
 3de:	f6 95       	lsr	r31
 3e0:	e7 95       	ror	r30
 3e2:	f6 95       	lsr	r31
 3e4:	e7 95       	ror	r30
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
#ifdef IOPORT_BASE_ADDRESS_H	
	if (port >= IOPORT_PORTH) {
 3e6:	ea 34       	cpi	r30, 0x4A	; 74
 3e8:	48 f0       	brcs	.+18     	; 0x3fc <MotorDriverInit+0xca>
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
 3ea:	ea 54       	subi	r30, 0x4A	; 74
 3ec:	f1 09       	sbc	r31, r1
 3ee:	9f 01       	movw	r18, r30
 3f0:	22 0f       	add	r18, r18
 3f2:	33 1f       	adc	r19, r19
 3f4:	e2 0f       	add	r30, r18
 3f6:	f3 1f       	adc	r31, r19
 3f8:	f3 95       	inc	r31
 3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 3fc:	9f 01       	movw	r18, r30
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	e2 0f       	add	r30, r18
 404:	f3 1f       	adc	r31, r19
 406:	b0 96       	adiw	r30, 0x20	; 32
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 408:	98 2f       	mov	r25, r24
 40a:	90 95       	com	r25
 40c:	21 81       	ldd	r18, Z+1	; 0x01
 40e:	92 23       	and	r25, r18
 410:	91 83       	std	Z+1, r25	; 0x01
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 412:	92 81       	ldd	r25, Z+2	; 0x02
 414:	89 2b       	or	r24, r25
	
	//configure timer
	tc_timer_init();
 416:	82 83       	std	Z+2, r24	; 0x02
	
	cpu_irq_enable(); //enable global interrupts
 418:	b8 d0       	rcall	.+368    	; 0x58a <tc_timer_init>
	if (emStatus != NOEMERG) //emergency bit changed
 41a:	78 94       	sei
 41c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 420:	8f 3f       	cpi	r24, 0xFF	; 255
	{
	   currConfig.config.callback(emStatus=NOEMERG); // call callback
 422:	41 f0       	breq	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 424:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
 428:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <emStatus>
	}					   
	err=READY;
 432:	19 95       	eicall
 434:	89 e0       	ldi	r24, 0x09	; 9
	StopMotor();
 436:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <err>
 43a:	67 cf       	rjmp	.-306    	; 0x30a <StopMotor>
 43c:	08 95       	ret

0000043e <GetStatus>:
	}
 }

DriverStatus GetStatus()
{
   return err | curDir | curSpeed;   
 43e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <err>
 442:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <curDir>
 446:	89 2b       	or	r24, r25
 448:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__data_start>
}
 44c:	89 2b       	or	r24, r25
 44e:	08 95       	ret

00000450 <GetEmStatus>:


const int8_t GetEmStatus()
{
   return emStatus;
}
 450:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 454:	08 95       	ret

00000456 <__vector_9>:
 // emergency switch isr
 ISR(INTERRUPTVECT,ISR_BLOCK)
 {
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	0b b6       	in	r0, 0x3b	; 59
 462:	0f 92       	push	r0
 464:	2f 93       	push	r18
 466:	3f 93       	push	r19
 468:	4f 93       	push	r20
 46a:	5f 93       	push	r21
 46c:	6f 93       	push	r22
 46e:	7f 93       	push	r23
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	af 93       	push	r26
 476:	bf 93       	push	r27
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
   if (!ioport_get_pin_level(IOPORT_CREATE_PIN(EMERGSWPORT,currConfig.config.emergSwPin)) && err == READY)
 47c:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <__data_end+0x3>
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	28 5f       	subi	r18, 0xF8	; 248
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 486:	c9 01       	movw	r24, r18
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 * \param: port number e.g. IOPORT_PORTB
 */
__always_inline static PORT_t *arch_ioport_port_to_base(uint8_t port)
{
#ifdef IOPORT_BASE_ADDRESS_H	
	if (port >= IOPORT_PORTH) {
 494:	8a 34       	cpi	r24, 0x4A	; 74
 496:	58 f0       	brcs	.+22     	; 0x4ae <__vector_9+0x58>
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
 498:	99 27       	eor	r25, r25
 49a:	8a 54       	subi	r24, 0x4A	; 74
 49c:	91 09       	sbc	r25, r1
 49e:	fc 01       	movw	r30, r24
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	8e 0f       	add	r24, r30
 4a6:	9f 1f       	adc	r25, r31
 4a8:	fc 01       	movw	r30, r24
 4aa:	f3 95       	inc	r31
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <__vector_9+0x68>
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 4ae:	99 27       	eor	r25, r25
 4b0:	fc 01       	movw	r30, r24
 4b2:	ee 0f       	add	r30, r30
 4b4:	ff 1f       	adc	r31, r31
 4b6:	8e 0f       	add	r24, r30
 4b8:	9f 1f       	adc	r25, r31
 4ba:	fc 01       	movw	r30, r24
 4bc:	b0 96       	adiw	r30, 0x20	; 32
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 4be:	40 81       	ld	r20, Z
 4c0:	27 70       	andi	r18, 0x07	; 7
 4c2:	33 27       	eor	r19, r19
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__vector_9+0x78>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	2a 95       	dec	r18
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__vector_9+0x74>
 4d2:	84 23       	and	r24, r20
 4d4:	71 f4       	brne	.+28     	; 0x4f2 <__vector_9+0x9c>
 4d6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <err>
 4da:	89 30       	cpi	r24, 0x09	; 9
 4dc:	51 f4       	brne	.+20     	; 0x4f2 <__vector_9+0x9c>
   { // switch closed
      emStatus=-emStatus;
 4de:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <emStatus>
 4e2:	81 95       	neg	r24
 4e4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <emStatus>
      currConfig.config.callback(emStatus);
 4e8:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
 4ec:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 4f0:	19 95       	eicall
   } 
 }
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0b be       	out	0x3b, r0	; 59
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__vector_default>:
 
 ISR(BADISR_vect) // don't let cpu reset
 {
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 }
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <__vector_13>:
# define TC_TIMEOUT_COMP_vect TIMER2_COMPA_vect
#endif

//! \brief Interrupt handler for TC compare
ISR(TC_TIMEOUT_COMP_vect)
{
 52c:	1f 92       	push	r1
 52e:	0f 92       	push	r0
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	0f 92       	push	r0
 534:	11 24       	eor	r1, r1
 536:	0b b6       	in	r0, 0x3b	; 59
 538:	0f 92       	push	r0
 53a:	2f 93       	push	r18
 53c:	3f 93       	push	r19
 53e:	4f 93       	push	r20
 540:	5f 93       	push	r21
 542:	6f 93       	push	r22
 544:	7f 93       	push	r23
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	ef 93       	push	r30
 550:	ff 93       	push	r31
   if (tc_timer_started)
 552:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <tc_timer_started>
 556:	88 23       	and	r24, r24
 558:	29 f0       	breq	.+10     	; 0x564 <__vector_13+0x38>
   {
	  timer_callback();
 55a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <timer_callback>
 55e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <timer_callback+0x1>
 562:	19 95       	eicall
   }
}
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	0b be       	out	0x3b, r0	; 59
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <tc_timer_init>:

/** @} */

void tc_timer_init()
{
    if (!tc_timer_inited && !tc_timer_setted && !tc_timer_started)
 58a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <tc_timer_inited>
 58e:	81 11       	cpse	r24, r1
 590:	15 c0       	rjmp	.+42     	; 0x5bc <tc_timer_init+0x32>
 592:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <tc_timer_setted>
 596:	81 11       	cpse	r24, r1
 598:	11 c0       	rjmp	.+34     	; 0x5bc <tc_timer_init+0x32>
 59a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <tc_timer_started>
 59e:	81 11       	cpse	r24, r1
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <tc_timer_init+0x32>
	{
	
	// Set up clock source according to configuration
	ASSR = TC_TIMEOUT_ASSR_MASK;
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7000b6>

	// Configure Timer/Counter to CTC mode, and set desired prescaler
#ifdef TC_TIMEOUT_TCCRB // Only newer mega devices have two control register
	TC_TIMEOUT_TCCRA = 1 << WGM21;
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TC_TIMEOUT_TCCRB = TIMER_STOP;
 5ae:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
#else
	TC_TIMEOUT_TCCRA = (1 << WGM21) | TIMER_STOP;
#endif
    
	// Enable interrupt for compare match
	TC_TIMEOUT_TIMSK = 1 << TC_TIMEOUT_OCIE;
 5b2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>

	tc_timer_inited=true;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <tc_timer_inited>
 5bc:	08 95       	ret

000005be <tc_timer_set>:



void tc_timer_set(uint32_t val,void (*callback)(void))
{
   if (tc_timer_inited && !tc_timer_started)
 5be:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <tc_timer_inited>
 5c2:	22 23       	and	r18, r18
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <tc_timer_set+0xa>
 5c6:	64 c0       	rjmp	.+200    	; 0x690 <tc_timer_set+0xd2>
 5c8:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <tc_timer_started>
 5cc:	21 11       	cpse	r18, r1
 5ce:	60 c0       	rjmp	.+192    	; 0x690 <tc_timer_set+0xd2>
   {
    timer_callback=callback;  
 5d0:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <timer_callback+0x1>
 5d4:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <timer_callback>
   uint16_t tc_timer_prescaler=1;

   if (val > 0xFF*2<<7)
 5d8:	61 30       	cpi	r22, 0x01	; 1
 5da:	2f ef       	ldi	r18, 0xFF	; 255
 5dc:	72 07       	cpc	r23, r18
 5de:	82 07       	cpc	r24, r18
 5e0:	92 07       	cpc	r25, r18
 5e2:	40 f0       	brcs	.+16     	; 0x5f4 <tc_timer_set+0x36>
   {
      tc_timer_prescale_mask|=(1<<CS21)|(1<<CS22);
 5e4:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <tc_timer_prescale_mask>
 5e8:	26 60       	ori	r18, 0x06	; 6
 5ea:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	  tc_timer_prescaler=1024;
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	34 e0       	ldi	r19, 0x04	; 4
 5f2:	42 c0       	rjmp	.+132    	; 0x678 <tc_timer_set+0xba>
   }
   else if (val > 0xFF*2<<6)
 5f4:	61 38       	cpi	r22, 0x81	; 129
 5f6:	2f e7       	ldi	r18, 0x7F	; 127
 5f8:	72 07       	cpc	r23, r18
 5fa:	81 05       	cpc	r24, r1
 5fc:	91 05       	cpc	r25, r1
 5fe:	30 f0       	brcs	.+12     	; 0x60c <tc_timer_set+0x4e>
   {
      tc_timer_prescale_mask=(1 << CS22) | (1 << CS21);
 600:	26 e0       	ldi	r18, 0x06	; 6
 602:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	  tc_timer_prescaler=256;
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	31 e0       	ldi	r19, 0x01	; 1
 60a:	36 c0       	rjmp	.+108    	; 0x678 <tc_timer_set+0xba>
   }
   else if (val > 0xFF*2<<5)
 60c:	61 3c       	cpi	r22, 0xC1	; 193
 60e:	2f e3       	ldi	r18, 0x3F	; 63
 610:	72 07       	cpc	r23, r18
 612:	81 05       	cpc	r24, r1
 614:	91 05       	cpc	r25, r1
 616:	40 f0       	brcs	.+16     	; 0x628 <tc_timer_set+0x6a>
   {
       tc_timer_prescale_mask|=(1<<CS22);
 618:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <tc_timer_prescale_mask>
 61c:	24 60       	ori	r18, 0x04	; 4
 61e:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	   tc_timer_prescaler=128;
 622:	20 e8       	ldi	r18, 0x80	; 128
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	28 c0       	rjmp	.+80     	; 0x678 <tc_timer_set+0xba>
   }
   else if (val > 0xFF*2<<4)
 628:	61 3e       	cpi	r22, 0xE1	; 225
 62a:	2f e1       	ldi	r18, 0x1F	; 31
 62c:	72 07       	cpc	r23, r18
 62e:	81 05       	cpc	r24, r1
 630:	91 05       	cpc	r25, r1
 632:	30 f0       	brcs	.+12     	; 0x640 <tc_timer_set+0x82>
   {
       tc_timer_prescale_mask=(1<<CS22);
 634:	24 e0       	ldi	r18, 0x04	; 4
 636:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	   tc_timer_prescaler=64;
 63a:	20 e4       	ldi	r18, 0x40	; 64
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	1c c0       	rjmp	.+56     	; 0x678 <tc_timer_set+0xba>
   }
   else if (val > 0xFF*2<<2)
 640:	69 3f       	cpi	r22, 0xF9	; 249
 642:	27 e0       	ldi	r18, 0x07	; 7
 644:	72 07       	cpc	r23, r18
 646:	81 05       	cpc	r24, r1
 648:	91 05       	cpc	r25, r1
 64a:	40 f0       	brcs	.+16     	; 0x65c <tc_timer_set+0x9e>
   {
       tc_timer_prescale_mask|=(1<<CS21);
 64c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <tc_timer_prescale_mask>
 650:	22 60       	ori	r18, 0x02	; 2
 652:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	   tc_timer_prescaler=32;
 656:	20 e2       	ldi	r18, 0x20	; 32
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	0e c0       	rjmp	.+28     	; 0x678 <tc_timer_set+0xba>
   }
   else if (val > 0xFF)
 65c:	6f 3f       	cpi	r22, 0xFF	; 255
 65e:	71 05       	cpc	r23, r1
 660:	81 05       	cpc	r24, r1
 662:	91 05       	cpc	r25, r1
 664:	39 f0       	breq	.+14     	; 0x674 <tc_timer_set+0xb6>
 666:	30 f0       	brcs	.+12     	; 0x674 <tc_timer_set+0xb6>
   {
       tc_timer_prescale_mask=(1<<CS21);
 668:	22 e0       	ldi	r18, 0x02	; 2
 66a:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <tc_timer_prescale_mask>
	   tc_timer_prescaler=8;
 66e:	28 e0       	ldi	r18, 0x08	; 8
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <tc_timer_set+0xba>
void tc_timer_set(uint32_t val,void (*callback)(void))
{
   if (tc_timer_inited && !tc_timer_started)
   {
    timer_callback=callback;  
   uint16_t tc_timer_prescaler=1;
 674:	21 e0       	ldi	r18, 0x01	; 1
 676:	30 e0       	ldi	r19, 0x00	; 0
   else if (val > 0xFF)
   {
       tc_timer_prescale_mask=(1<<CS21);
	   tc_timer_prescaler=8;
   }
   TC_TIMEOUT_OCR=val/tc_timer_prescaler - 1;
 678:	40 e0       	ldi	r20, 0x00	; 0
 67a:	50 e0       	ldi	r21, 0x00	; 0
 67c:	7e d1       	rcall	.+764    	; 0x97a <__udivmodsi4>
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	e3 eb       	ldi	r30, 0xB3	; 179
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	20 83       	st	Z, r18
   if (TC_TIMEOUT_OCR < 0)
 686:	80 81       	ld	r24, Z
      TC_TIMEOUT_OCR=0;
   else if (TC_TIMEOUT_OCR > 0xFF)
 688:	80 81       	ld	r24, Z
      TC_TIMEOUT_OCR=255;
   tc_timer_setted=true;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <tc_timer_setted>
 690:	08 95       	ret

00000692 <tc_timer_start>:
   }
}
void tc_timer_start()
{
   if (tc_timer_setted)
 692:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <tc_timer_setted>
 696:	88 23       	and	r24, r24
 698:	39 f0       	breq	.+14     	; 0x6a8 <tc_timer_start+0x16>
   {

   #ifdef TC_TIMEOUT_TCCRB // Only newer mega devices have two control register
   TC_TIMEOUT_TCCRB = tc_timer_prescale_mask;
 69a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <tc_timer_prescale_mask>
 69e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   #else
   TC_TIMEOUT_TCCRA |= (1 << WGM21) | tc_timer_prescale_mask;
   #endif
   tc_timer_started=true;
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <tc_timer_started>
 6a8:	08 95       	ret

000006aa <tc_timer_stop>:
   }
}
void tc_timer_stop()
{
    if (tc_timer_started)
 6aa:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <tc_timer_started>
 6ae:	81 11       	cpse	r24, r1
	{
	    #ifdef TC_TIMEOUT_TCCRB // Only newer mega devices have two control register
	    TC_TIMEOUT_TCCRB = 0;
 6b0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
 6b4:	08 95       	ret

000006b6 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 6b6:	08 95       	ret

000006b8 <emergIndicator>:
   ioport_configure_port_pin((void*)ioport_pin_to_port(EMLEDPIN),(pin_mask_t)(1<<EMLEDPIN),
                             IOPORT_DIR_OUTPUT);
}
void emergIndicator(int8_t status)
{
   if (status == EMERGENCY)
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <emergIndicator+0x8>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6bc:	5c 9a       	sbi	0x0b, 4	; 11
 6be:	08 95       	ret
   {
      ioport_set_pin_high(IOPORT_CREATE_PIN(EMLEDPORT,EMLEDPIN));
   }
   else if (status == NOEMERG)
 6c0:	8f 3f       	cpi	r24, 0xFF	; 255
 6c2:	09 f4       	brne	.+2      	; 0x6c6 <emergIndicator+0xe>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6c4:	5c 98       	cbi	0x0b, 4	; 11
 6c6:	08 95       	ret

000006c8 <main>:
#define CurConfig LEDConfigA

int main (void)
{
	board_init();
	sysclk_init();
 6c8:	f6 df       	rcall	.-20     	; 0x6b6 <board_init>
 6ca:	a2 dd       	rcall	.-1212   	; 0x210 <sysclk_init>
   cpu_irq_enable(); 
}

static void switch_init()
{
   cpu_irq_disable();
 6cc:	f8 94       	cli
   // set interrupt on rising edge
   EICRA=(1<<ISC31)|(1<<ISC30)|(1<<ISC21)|(1<<ISC20)|(1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
 6ce:	8f ef       	ldi	r24, 0xFF	; 255
 6d0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
   // turn on interrupts on change of pins 0-3
   EIMSK=(1<<INT3)|(1<<INT2)|(1<<INT1)|(1<<INT0);
 6d4:	8f e0       	ldi	r24, 0x0F	; 15
 6d6:	8d bb       	out	0x1d, r24	; 29
   // turn on pin change interrupt for PCINT1
   PCICR=(1<<PCIE1);
 6d8:	82 e0       	ldi	r24, 0x02	; 2
 6da:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
   PCMSK1=(1<<PCINT9);
 6de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x70006c>
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 6e2:	91 b1       	in	r25, 0x01	; 1
 6e4:	90 7f       	andi	r25, 0xF0	; 240
 6e6:	91 b9       	out	0x01, r25	; 1
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 6e8:	92 b1       	in	r25, 0x02	; 2
 6ea:	9f 60       	ori	r25, 0x0F	; 15
 6ec:	92 b9       	out	0x02, r25	; 2
   ioport_configure_group(ioport_pin_to_port_id(SWPIN(D,0)),SWPINDMASK,IOPORT_PULL_UP|IOPORT_DIR_INPUT);
   ioport_configure_group(ioport_pin_to_port_id(SWPIN(J,0)),SWPINJMASK,IOPORT_PULL_UP|IOPORT_DIR_INPUT);
   btnTimeout=swPressed=false;
 6ee:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
 6f2:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
   cpu_irq_enable();
 6f6:	78 94       	sei
	}
}

static void timer_dbnc_init()
{
   cpu_irq_disable();
 6f8:	f8 94       	cli
   TCCR1B=(1<<WGM12); // normal operation
 6fa:	98 e0       	ldi	r25, 0x08	; 8
 6fc:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   OCR1A=TMR_TICKS(sysclk_get_cpu_hz(),DBNC_DLY_TIME,8);
 700:	23 e5       	ldi	r18, 0x53	; 83
 702:	37 e0       	ldi	r19, 0x07	; 7
 704:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 708:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
   TIMSK1=(1<<OCIE1A); // enable timer1 interrupt
 70c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
   swPressed=btnTimeout=false;
 710:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 714:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
   cpu_irq_enable(); 
 718:	78 94       	sei
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 71a:	14 98       	cbi	0x02, 4	; 2
		}

		*((uint8_t *)port + 1) |= pin_mask;
 71c:	0c 9a       	sbi	0x01, 4	; 1
	sysclk_init();
	ioport_init();
	switch_init();
	timer_dbnc_init();
	emerg_led_init();
	Status status=DrvrInit(CurConfig,&emergIndicator);
 71e:	6c e5       	ldi	r22, 0x5C	; 92
 720:	73 e0       	ldi	r23, 0x03	; 3
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	35 dd       	rcall	.-1430   	; 0x190 <DrvrInit>
	while (true)
	{
	   if (swPressed && btnTimeout && status!=ERR)
 726:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <swPressed>
 72a:	99 23       	and	r25, r25
 72c:	e1 f3       	breq	.-8      	; 0x726 <main+0x5e>
 72e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <btnTimeout>
 732:	99 23       	and	r25, r25
 734:	c1 f3       	breq	.-16     	; 0x726 <main+0x5e>
 736:	86 30       	cpi	r24, 0x06	; 6
 738:	b1 f3       	breq	.-20     	; 0x726 <main+0x5e>
	   {
	      switch(curSwNum)
 73a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <curSwNum>
 73e:	93 30       	cpi	r25, 0x03	; 3
 740:	c1 f0       	breq	.+48     	; 0x772 <main+0xaa>
 742:	28 f4       	brcc	.+10     	; 0x74e <main+0x86>
 744:	91 30       	cpi	r25, 0x01	; 1
 746:	41 f0       	breq	.+16     	; 0x758 <main+0x90>
 748:	92 30       	cpi	r25, 0x02	; 2
 74a:	61 f0       	breq	.+24     	; 0x764 <main+0x9c>
 74c:	ec cf       	rjmp	.-40     	; 0x726 <main+0x5e>
 74e:	94 30       	cpi	r25, 0x04	; 4
 750:	b9 f0       	breq	.+46     	; 0x780 <main+0xb8>
 752:	95 30       	cpi	r25, 0x05	; 5
 754:	e1 f0       	breq	.+56     	; 0x78e <main+0xc6>
		  {
		     case 1: status=MotorStop(); curSwNum=0; swPressed=false; break;
 756:	e7 cf       	rjmp	.-50     	; 0x726 <main+0x5e>
 758:	33 dd       	rcall	.-1434   	; 0x1c0 <MotorStop>
 75a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 75e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
			 case 2: status=MotorForward(SLOW); curSwNum=0; swPressed=false; break;
 762:	e1 cf       	rjmp	.-62     	; 0x726 <main+0x5e>
 764:	84 e0       	ldi	r24, 0x04	; 4
 766:	32 dd       	rcall	.-1436   	; 0x1cc <MotorForward>
 768:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 76c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
			 case 3: status=MotorForward(FAST); curSwNum=0; swPressed=false; break;
 770:	da cf       	rjmp	.-76     	; 0x726 <main+0x5e>
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	2b dd       	rcall	.-1450   	; 0x1cc <MotorForward>
 776:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 77a:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
			 case 4: status=MotorReverse(SLOW); curSwNum=0; swPressed=false; break;
 77e:	d3 cf       	rjmp	.-90     	; 0x726 <main+0x5e>
 780:	84 e0       	ldi	r24, 0x04	; 4
 782:	35 dd       	rcall	.-1430   	; 0x1ee <MotorReverse>
 784:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 788:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
			 case 5: status=MotorReverse(FAST); curSwNum=0; swPressed=false; break;  
 78c:	cc cf       	rjmp	.-104    	; 0x726 <main+0x5e>
 78e:	83 e0       	ldi	r24, 0x03	; 3
 790:	2e dd       	rcall	.-1444   	; 0x1ee <MotorReverse>
 792:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <curSwNum>
 796:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <swPressed>
 79a:	c5 cf       	rjmp	.-118    	; 0x726 <main+0x5e>

0000079c <__vector_17>:
   {
      ioport_set_pin_low(IOPORT_CREATE_PIN(EMLEDPORT,EMLEDPIN));
   }
}
ISR (TIMER1_COMPA_vect,ISR_BLOCK)
{
 79c:	1f 92       	push	r1
 79e:	0f 92       	push	r0
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	0f 92       	push	r0
 7a4:	11 24       	eor	r1, r1
 7a6:	0b b6       	in	r0, 0x3b	; 59
 7a8:	0f 92       	push	r0
 7aa:	8f 93       	push	r24
 7ac:	ef 93       	push	r30
 7ae:	ff 93       	push	r31
   DEBOUNCE();
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <btnTimeout>
   DISABLE_DBNC_TMR();
 7b6:	e1 e8       	ldi	r30, 0x81	; 129
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	88 7f       	andi	r24, 0xF8	; 248
 7be:	80 83       	st	Z, r24
}
 7c0:	ff 91       	pop	r31
 7c2:	ef 91       	pop	r30
 7c4:	8f 91       	pop	r24
 7c6:	0f 90       	pop	r0
 7c8:	0b be       	out	0x3b, r0	; 59
 7ca:	0f 90       	pop	r0
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	0f 90       	pop	r0
 7d0:	1f 90       	pop	r1
 7d2:	18 95       	reti

000007d4 <__vector_1>:
ISR (INT0_vect, ISR_BLOCK)
{
 7d4:	1f 92       	push	r1
 7d6:	0f 92       	push	r0
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	0f 92       	push	r0
 7dc:	11 24       	eor	r1, r1
 7de:	0b b6       	in	r0, 0x3b	; 59
 7e0:	0f 92       	push	r0
 7e2:	8f 93       	push	r24
 7e4:	ef 93       	push	r30
 7e6:	ff 93       	push	r31
   curSwNum=1;
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
   ENABLE_DBNC_TMR();
 7ee:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 7f2:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 7f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 7fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 7fe:	e1 e8       	ldi	r30, 0x81	; 129
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	80 83       	st	Z, r24
}
 808:	ff 91       	pop	r31
 80a:	ef 91       	pop	r30
 80c:	8f 91       	pop	r24
 80e:	0f 90       	pop	r0
 810:	0b be       	out	0x3b, r0	; 59
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
 818:	1f 90       	pop	r1
 81a:	18 95       	reti

0000081c <__vector_2>:
ISR (INT1_vect, ISR_BLOCK)
{
 81c:	1f 92       	push	r1
 81e:	0f 92       	push	r0
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	0f 92       	push	r0
 824:	11 24       	eor	r1, r1
 826:	0b b6       	in	r0, 0x3b	; 59
 828:	0f 92       	push	r0
 82a:	8f 93       	push	r24
 82c:	9f 93       	push	r25
 82e:	ef 93       	push	r30
 830:	ff 93       	push	r31
   curSwNum=2;
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
   ENABLE_DBNC_TMR();
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <swPressed>
 83e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 842:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 846:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 84a:	e1 e8       	ldi	r30, 0x81	; 129
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	90 81       	ld	r25, Z
 850:	80 83       	st	Z, r24
}
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	9f 91       	pop	r25
 858:	8f 91       	pop	r24
 85a:	0f 90       	pop	r0
 85c:	0b be       	out	0x3b, r0	; 59
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <__vector_3>:
ISR (INT2_vect,ISR_BLOCK)
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
 872:	0b b6       	in	r0, 0x3b	; 59
 874:	0f 92       	push	r0
 876:	8f 93       	push	r24
 878:	ef 93       	push	r30
 87a:	ff 93       	push	r31
   curSwNum=3;
 87c:	83 e0       	ldi	r24, 0x03	; 3
 87e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
   ENABLE_DBNC_TMR();
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 888:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 88c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 890:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 894:	e1 e8       	ldi	r30, 0x81	; 129
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	80 83       	st	Z, r24
}
 89e:	ff 91       	pop	r31
 8a0:	ef 91       	pop	r30
 8a2:	8f 91       	pop	r24
 8a4:	0f 90       	pop	r0
 8a6:	0b be       	out	0x3b, r0	; 59
 8a8:	0f 90       	pop	r0
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	0f 90       	pop	r0
 8ae:	1f 90       	pop	r1
 8b0:	18 95       	reti

000008b2 <__vector_4>:
ISR (INT3_vect,ISR_BLOCK)
{
 8b2:	1f 92       	push	r1
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	0b b6       	in	r0, 0x3b	; 59
 8be:	0f 92       	push	r0
 8c0:	8f 93       	push	r24
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
	curSwNum=4;
 8c6:	84 e0       	ldi	r24, 0x04	; 4
 8c8:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
	ENABLE_DBNC_TMR();
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 8d2:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 8d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 8da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 8de:	e1 e8       	ldi	r30, 0x81	; 129
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	82 e0       	ldi	r24, 0x02	; 2
 8e6:	80 83       	st	Z, r24
}
 8e8:	ff 91       	pop	r31
 8ea:	ef 91       	pop	r30
 8ec:	8f 91       	pop	r24
 8ee:	0f 90       	pop	r0
 8f0:	0b be       	out	0x3b, r0	; 59
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	0f 90       	pop	r0
 8f8:	1f 90       	pop	r1
 8fa:	18 95       	reti

000008fc <__vector_10>:

ISR (PCINT1_vect,ISR_BLOCK)
{
 8fc:	1f 92       	push	r1
 8fe:	0f 92       	push	r0
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	0f 92       	push	r0
 904:	11 24       	eor	r1, r1
 906:	0b b6       	in	r0, 0x3b	; 59
 908:	0f 92       	push	r0
 90a:	8f 93       	push	r24
 90c:	ef 93       	push	r30
 90e:	ff 93       	push	r31
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 910:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
    if (!ioport_get_pin_level(IOPORT_CREATE_PIN(SW5PORT,SWPIN(J,0))))
 914:	80 fd       	sbrc	r24, 0
 916:	12 c0       	rjmp	.+36     	; 0x93c <__vector_10+0x40>
	{
	   curSwNum=5;
 918:	85 e0       	ldi	r24, 0x05	; 5
 91a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
	   //if switch pressed, enable debounce timer
	   ENABLE_DBNC_TMR();
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 924:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 928:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 92c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 930:	e1 e8       	ldi	r30, 0x81	; 129
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	82 e0       	ldi	r24, 0x02	; 2
 938:	80 83       	st	Z, r24
 93a:	15 c0       	rjmp	.+42     	; 0x966 <__vector_10+0x6a>
 93c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x700103>
	}
	else if (!ioport_get_pin_level(IOPORT_CREATE_PIN(SW5PORT,SWPIN(J,0))))
 940:	80 fd       	sbrc	r24, 0
 942:	11 c0       	rjmp	.+34     	; 0x966 <__vector_10+0x6a>
	{
	   curSwNum=6;
 944:	86 e0       	ldi	r24, 0x06	; 6
 946:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <curSwNum>
	   ENABLE_DBNC_TMR();
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <swPressed>
 950:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <btnTimeout>
 954:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 958:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 95c:	e1 e8       	ldi	r30, 0x81	; 129
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	80 83       	st	Z, r24
	}
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	8f 91       	pop	r24
 96c:	0f 90       	pop	r0
 96e:	0b be       	out	0x3b, r0	; 59
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <__udivmodsi4>:
 97a:	a1 e2       	ldi	r26, 0x21	; 33
 97c:	1a 2e       	mov	r1, r26
 97e:	aa 1b       	sub	r26, r26
 980:	bb 1b       	sub	r27, r27
 982:	fd 01       	movw	r30, r26
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <__udivmodsi4_ep>

00000986 <__udivmodsi4_loop>:
 986:	aa 1f       	adc	r26, r26
 988:	bb 1f       	adc	r27, r27
 98a:	ee 1f       	adc	r30, r30
 98c:	ff 1f       	adc	r31, r31
 98e:	a2 17       	cp	r26, r18
 990:	b3 07       	cpc	r27, r19
 992:	e4 07       	cpc	r30, r20
 994:	f5 07       	cpc	r31, r21
 996:	20 f0       	brcs	.+8      	; 0x9a0 <__udivmodsi4_ep>
 998:	a2 1b       	sub	r26, r18
 99a:	b3 0b       	sbc	r27, r19
 99c:	e4 0b       	sbc	r30, r20
 99e:	f5 0b       	sbc	r31, r21

000009a0 <__udivmodsi4_ep>:
 9a0:	66 1f       	adc	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	1a 94       	dec	r1
 9aa:	69 f7       	brne	.-38     	; 0x986 <__udivmodsi4_loop>
 9ac:	60 95       	com	r22
 9ae:	70 95       	com	r23
 9b0:	80 95       	com	r24
 9b2:	90 95       	com	r25
 9b4:	9b 01       	movw	r18, r22
 9b6:	ac 01       	movw	r20, r24
 9b8:	bd 01       	movw	r22, r26
 9ba:	cf 01       	movw	r24, r30
 9bc:	08 95       	ret

000009be <_exit>:
 9be:	f8 94       	cli

000009c0 <__stop_program>:
 9c0:	ff cf       	rjmp	.-2      	; 0x9c0 <__stop_program>
